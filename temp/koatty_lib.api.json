{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.47.11",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "koatty_lib!",
  "docComment": "",
  "name": "koatty_lib",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "koatty_lib!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!arrRemove:function(1)",
          "docComment": "/**\n * Removes the specified index element from the array\n *\n * @param arr - \n *\n * @param index - \n *\n * @returns {*} {any[]}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrRemove(arr: "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ", index: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arr",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "index",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "arrRemove"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!arrUnique:function(1)",
          "docComment": "/**\n * Creates an array of unique values, in order, from all of the provided arrays using SameValueZero for equality comparisons.\n *\n * @param arrays - The arrays to inspect.  @return Returns the new array of combined values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "arrUnique: <T>(...arrays: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "lodash.List",
              "canonicalReference": "@types/lodash!\"\\\"../index\\\"\".List:type"
            },
            {
              "kind": "Content",
              "text": "<T> | null | undefined>"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "T[]"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "arrays",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrUnique"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!camelCase:function(1)",
          "docComment": "/**\n * convert string to camelCase/pascalCase\n *\n * @param input - \n *\n * @param pascalCase - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function camelCase(input: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", pascalCase?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "input",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "pascalCase",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "camelCase"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!checkBoundary:function(1)",
          "docComment": "/**\n * Check whether the number is out of range, and give a prompt if it is out of range\n *\n * @param num - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function checkBoundary(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "checkBoundary"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!chmod:function(1)",
          "docComment": "/**\n * Modify the permissions of the file or folder p. Asynchronous mode\n *\n * @param p - \n *\n * @param mode - \n *\n * @returns {*} {Promise<any>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function chmod(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", mode?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "mode",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "chmod"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!clone:function(1)",
          "docComment": "/**\n * Copy the source, deep deep to true depth copy\n *\n * @param source - \n *\n * @param deep - \n *\n * @returns {*} {AnyObject}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function clone(source: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": ", deep?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "source",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "deep",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "clone"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!computeNumber:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function computeNumber(a: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", type: "
            },
            {
              "kind": "Reference",
              "text": "computeType",
              "canonicalReference": "koatty_lib!~computeType:type"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    result: number;\n    next(nextType: "
            },
            {
              "kind": "Reference",
              "text": "computeType",
              "canonicalReference": "koatty_lib!~computeType:type"
            },
            {
              "kind": "Content",
              "text": ", nextValue: number): any;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "type",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            }
          ],
          "name": "computeNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!dateTime:function(1)",
          "docComment": "/**\n * Date time stamp and formatting\n *\n * @export\n *\n * @param date - \n *\n * @param format - defaults 'YYYY-MM-DD hh:mi:ss.SSS'\n *\n * @param offset - defaults 8\n *\n * @returns {(number | string)}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dateTime(date?: "
            },
            {
              "kind": "Content",
              "text": "number | string | undefined"
            },
            {
              "kind": "Content",
              "text": ", format?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", offset?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number | string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "date",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            },
            {
              "parameterName": "format",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "offset",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "dateTime"
        },
        {
          "kind": "Variable",
          "canonicalReference": "koatty_lib!datetime:var",
          "docComment": "/**\n * Date time stamp and formatting\n *\n * @export\n *\n * @param date - \n *\n * @param format - defaults 'YYYY-MM-DD hh:mi:ss.SSS'\n *\n * @param offset - defaults 8\n *\n * @returns {(number | string)}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "datetime: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "dateTime",
              "canonicalReference": "koatty_lib!dateTime:function"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "datetime",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!define:function(1)",
          "docComment": "/**\n * Short for Object.defineProperty, the property is getter when setter is false\n *\n * @param obj - \n *\n * @param property - \n *\n * @param value - \n *\n * @param setter - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function define(obj: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": ", property: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", setter?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "property",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "setter",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": true
            }
          ],
          "name": "define"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!divide:function(1)",
          "docComment": "/**\n * Exact division\n *\n * @param num1 - \n *\n * @param num2 - \n *\n * @returns {*} {number}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function divide(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "divide"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!eq:function(1)",
          "docComment": "/**\n * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero) comparison between two values to determine if they are equivalent.\n *\n * @category Lang\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.\n *\n * @returns Returns `true` if the values are equivalent, else `false`.\n *\n * @example\n *\n * var object = { 'user': 'fred' }; var other = { 'user': 'fred' };\n *\n * _.eq(object, object); // => true\n *\n * _.eq(object, other); // => false\n *\n * _.eq('a', 'a'); // => true\n *\n * _.eq('a', Object('a')); // => false\n *\n * _.eq(NaN, NaN); // => true\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "eq: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "eq"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!escapeHtml:function(1)",
          "docComment": "/**\n * Convert special characters(> < \" ') for entity character\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function escapeHtml(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "escapeHtml"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!escapeSpecial:function(1)",
          "docComment": "/**\n * Convert entity value in value to(> < \" ')\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function escapeSpecial(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "escapeSpecial"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!extend:function(1)",
          "docComment": "/**\n * So that the target object inherits the source, deep depth is true depth inheritance\n *\n * @param source - \n *\n * @param target - \n *\n * @param deep - \n *\n * @returns {*} {AnyObject}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function extend(source: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": ", target: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": ", deep?: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "source",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "target",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "deep",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "extend"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!generatorToPromise:function(1)",
          "docComment": "/**\n * Convert GeneratorFunction fn to Promise\n *\n * @export\n *\n * @param fn - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function generatorToPromise(fn: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "generatorToPromise"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!getDecimalLength:function(1)",
          "docComment": "/**\n * 获取数字小数点的长度\n *\n * @param n - 数字\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDecimalLength(n: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "n",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getDecimalLength"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!getDefer:function(1)",
          "docComment": "/**\n * Get promise deffer object\n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getDefer(): "
            },
            {
              "kind": "Reference",
              "text": "DeferObject",
              "canonicalReference": "koatty_lib!~DeferObject:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "getDefer"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!gt:function(1)",
          "docComment": "/**\n * Checks if value is greater than other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is greater than other, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "gt: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "gt"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!gte:function(1)",
          "docComment": "/**\n * Checks if value is greater than or equal to other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is greater than or equal to other, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "gte: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "gte"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!hasOwn:function(1)",
          "docComment": "/**\n * Short for hasOwnProperty\n *\n * @export\n *\n * @param obj - \n *\n * @param property - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function hasOwn(obj: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": ", property: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "property",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "hasOwn"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "koatty_lib!Helper:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "Helper",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.arrRemove:function(1)",
              "docComment": "/**\n * Removes the specified index element from the array\n *\n * @param arr - \n *\n * @param index - \n *\n * @returns {*} {any[]}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function arrRemove(arr: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "arr",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "arrRemove"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.arrUnique:function(1)",
              "docComment": "/**\n * Creates an array of unique values, in order, from all of the provided arrays using SameValueZero for equality comparisons.\n *\n * @param arrays - The arrays to inspect.  @return Returns the new array of combined values.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "arrUnique: <T>(...arrays: "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "lodash.List",
                  "canonicalReference": "@types/lodash!\"\\\"../index\\\"\".List:type"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "T[]"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "arrays",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "arrUnique"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.camelCase:function(1)",
              "docComment": "/**\n * convert string to camelCase/pascalCase\n *\n * @param input - \n *\n * @param pascalCase - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function camelCase(input: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", pascalCase?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "pascalCase",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "camelCase"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.checkBoundary:function(1)",
              "docComment": "/**\n * Check whether the number is out of range, and give a prompt if it is out of range\n *\n * @param num - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function checkBoundary(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "checkBoundary"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.chmod:function(1)",
              "docComment": "/**\n * Modify the permissions of the file or folder p. Asynchronous mode\n *\n * @param p - \n *\n * @param mode - \n *\n * @returns {*} {Promise<any>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function chmod(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mode?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "chmod"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.clone:function(1)",
              "docComment": "/**\n * Copy the source, deep deep to true depth copy\n *\n * @param source - \n *\n * @param deep - \n *\n * @returns {*} {AnyObject}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function clone(source: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ", deep?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "deep",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "clone"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.computeNumber:function(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function computeNumber(a: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Reference",
                  "text": "computeType",
                  "canonicalReference": "koatty_lib!~computeType:type"
                },
                {
                  "kind": "Content",
                  "text": ", b: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n    result: number;\n    next(nextType: "
                },
                {
                  "kind": "Reference",
                  "text": "computeType",
                  "canonicalReference": "koatty_lib!~computeType:type"
                },
                {
                  "kind": "Content",
                  "text": ", nextValue: number): any;\n}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "a",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "b",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "computeNumber"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.dateTime:function(1)",
              "docComment": "/**\n * Date time stamp and formatting\n *\n * @export\n *\n * @param date - \n *\n * @param format - defaults 'YYYY-MM-DD hh:mi:ss.SSS'\n *\n * @param offset - defaults 8\n *\n * @returns {(number | string)}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function dateTime(date?: "
                },
                {
                  "kind": "Content",
                  "text": "number | string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", format?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", offset?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "date",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "format",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "offset",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "dateTime"
            },
            {
              "kind": "Variable",
              "canonicalReference": "koatty_lib!Helper.datetime:var",
              "docComment": "/**\n * Date time stamp and formatting\n *\n * @export\n *\n * @param date - \n *\n * @param format - defaults 'YYYY-MM-DD hh:mi:ss.SSS'\n *\n * @param offset - defaults 8\n *\n * @returns {(number | string)}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "datetime: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "dateTime",
                  "canonicalReference": "koatty_lib!dateTime:function"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "datetime",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.define:function(1)",
              "docComment": "/**\n * Short for Object.defineProperty, the property is getter when setter is false\n *\n * @param obj - \n *\n * @param property - \n *\n * @param value - \n *\n * @param setter - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function define(obj: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ", property: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", setter?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "property",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "setter",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "name": "define"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.divide:function(1)",
              "docComment": "/**\n * Exact division\n *\n * @param num1 - \n *\n * @param num2 - \n *\n * @returns {*} {number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function divide(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "divide"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.eq:function(1)",
              "docComment": "/**\n * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero) comparison between two values to determine if they are equivalent.\n *\n * @category Lang\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.\n *\n * @returns Returns `true` if the values are equivalent, else `false`.\n *\n * @example\n *\n * var object = { 'user': 'fred' }; var other = { 'user': 'fred' };\n *\n * _.eq(object, object); // => true\n *\n * _.eq(object, other); // => false\n *\n * _.eq('a', 'a'); // => true\n *\n * _.eq('a', Object('a')); // => false\n *\n * _.eq(NaN, NaN); // => true\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eq: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "eq"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.escapeHtml:function(1)",
              "docComment": "/**\n * Convert special characters(> < \" ') for entity character\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function escapeHtml(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "escapeHtml"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.escapeSpecial:function(1)",
              "docComment": "/**\n * Convert entity value in value to(> < \" ')\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function escapeSpecial(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "escapeSpecial"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.extend:function(1)",
              "docComment": "/**\n * So that the target object inherits the source, deep depth is true depth inheritance\n *\n * @param source - \n *\n * @param target - \n *\n * @param deep - \n *\n * @returns {*} {AnyObject}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function extend(source: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ", target: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ", deep?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "source",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "target",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "deep",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "extend"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.generatorToPromise:function(1)",
              "docComment": "/**\n * Convert GeneratorFunction fn to Promise\n *\n * @export\n *\n * @param fn - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function generatorToPromise(fn: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "generatorToPromise"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.getDecimalLength:function(1)",
              "docComment": "/**\n * 获取数字小数点的长度\n *\n * @param n - 数字\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function getDecimalLength(n: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "n",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getDecimalLength"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.getDefer:function(1)",
              "docComment": "/**\n * Get promise deffer object\n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function getDefer(): "
                },
                {
                  "kind": "Reference",
                  "text": "DeferObject",
                  "canonicalReference": "koatty_lib!~DeferObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getDefer"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.gt:function(1)",
              "docComment": "/**\n * Checks if value is greater than other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is greater than other, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gt: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "gt"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.gte:function(1)",
              "docComment": "/**\n * Checks if value is greater than or equal to other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is greater than or equal to other, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "gte: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "gte"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.hasOwn:function(1)",
              "docComment": "/**\n * Short for hasOwnProperty\n *\n * @export\n *\n * @param obj - \n *\n * @param property - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function hasOwn(obj: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ", property: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "property",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "hasOwn"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.inArray:function(1)",
              "docComment": "/**\n * Determines whether value is an element of array arr, only determine the same value with the element, do not determine the type\n *\n * @param value - \n *\n * @param arr - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function inArray(value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", arr: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "arr",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "inArray"
            },
            {
              "kind": "Variable",
              "canonicalReference": "koatty_lib!Helper.isArray:var",
              "docComment": "/**\n * Checks if value is classified as an Array object.\n *\n * @param value - The value to check.\n *\n * @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isArray: "
                },
                {
                  "kind": "Content",
                  "text": "{\n    (value?: any): "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is any[];\n    <T>(value?: any): "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is any[];\n}"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "isArray",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isArrayBuffer:function(1)",
              "docComment": "/**\n * Checks if value is classified as an ArrayBuffer object.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isArrayBuffer: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isArrayBuffer"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isAsyncFunction:function(1)",
              "docComment": "/**\n * Checks if value is a Async Function\n *\n * @export\n *\n * @param fn - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isAsyncFunction(fn: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isAsyncFunction"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isBoolean:function(1)",
              "docComment": "/**\n * Checks if value is classified as a boolean primitive or object.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBoolean: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isBoolean"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isBuffer:function(1)",
              "docComment": "/**\n * Checks if value is a buffer.\n *\n * @param value - The value to check.  @return Returns true if value is a buffer, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isBuffer: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isBuffer"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isClass:function(1)",
              "docComment": "/**\n * Checks if fn is a Class\n *\n * @param obj - \n *\n * @returns {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isClass(func: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "func",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isClass"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isDate:function(1)",
              "docComment": "/**\n * Checks if value is classified as a Date object.\n *\n * @param value - The value to check.\n *\n * @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDate: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Date",
                  "canonicalReference": "!Date:interface"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isDate"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isDir:function(1)",
              "docComment": "/**\n * Checks if path is a dir Synchronous mode\n *\n * @param p - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isDir(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isDir"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isEmpty:function(1)",
              "docComment": "/**\n * Checks value is empty, undefined, null, '', NaN, [], {} and any empty string(including spaces, tabs, formfeeds, etc.), returns true\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isEmpty(value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isEmpty"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isEqual:function(1)",
              "docComment": "/**\n * Performs a deep comparison between two values to determine if they are equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans, date objects, error objects, maps, numbers, `Object` objects, regexes, sets, strings, symbols, and typed arrays. `Object` objects are compared by their own, not inherited, enumerable properties. Functions and DOM nodes are **not** supported.\n *\n * @category Lang\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.\n *\n * @returns Returns `true` if the values are equivalent, else `false`.\n *\n * @example\n *\n * var object = { 'user': 'fred' }; var other = { 'user': 'fred' };\n *\n * _.isEqual(object, other); // => true\n *\n * object === other; // => false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEqual: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "isEqual"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isError:function(1)",
              "docComment": "/**\n * Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError object.\n *\n * @param value - The value to check.  @return Returns true if value is an error object, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isError: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isError"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isFile:function(1)",
              "docComment": "/**\n * Checks if path is a file Synchronous mode\n *\n * @param p - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isFile(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isFile"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isFunction:function(1)",
              "docComment": "/**\n * Checks if value is a callable function.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFunction: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is (...args: any[]) => any"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isFunction"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isGenerator:function(1)",
              "docComment": "/**\n * Checks if fn is a GeneratorFunction\n *\n * @export\n *\n * @param fn - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isGenerator(fn: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isGenerator"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isInteger:function(1)",
              "docComment": "/**\n * Checks if `value` is an integer.\n *\n * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\n *\n * @category Lang\n *\n * @param value - The value to check.\n *\n * @returns Returns `true` if `value` is an integer, else `false`.\n *\n * @example\n *\n * _.isInteger(3); // => true\n *\n * _.isInteger(Number.MIN_VALUE); // => false\n *\n * _.isInteger(Infinity); // => false\n *\n * _.isInteger('3'); // => false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isInteger: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isInteger"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isJSONObj:function(1)",
              "docComment": "/**\n * Checks if value is a standard JSON object, must be a plain object or array\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isJSONObj(value: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isJSONObj"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isJSONStr:function(1)",
              "docComment": "/**\n * Checks if value is a standard JSON string, must be a string, and can be deserialized as an plain object or array\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isJSONStr(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isJSONStr"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isMap:function(1)",
              "docComment": "/**\n * Checks if value is classified as a Map object.\n *\n * @param value - The value to check.\n *\n * @returns Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isMap: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, any>"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isMap"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isNaN:function(1)",
              "docComment": "/**\n * Checks if value is NaN.\n *\n * Note: This method is not the same as isNaN which returns true for undefined and other non-numeric values.\n *\n * @param value - The value to check.  @return Returns true if value is NaN, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNaN: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isNaN"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isNull:function(1)",
              "docComment": "/**\n * Checks if value is null.\n *\n * @param value - The value to check.  @return Returns true if value is null, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNull: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is null"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isNull"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isNumber:function(1)",
              "docComment": "/**\n * Checks if value is classified as a Number primitive or object.\n *\n * Note: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNumber: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is number"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isNumber"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isNumberString:function(1)",
              "docComment": "/**\n * Checks if value is a string that contains only numbers\n *\n * @param str - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isNumberString(str: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "str",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isNumberString"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isObject:function(1)",
              "docComment": "/**\n * Checks if value is a plain object, that is, an object created by the Object constructor or one with a [[Prototype]] of null.\n *\n * Note: This method assumes objects created by the Object constructor have no inherited enumerable properties.\n *\n * @param value - The value to check.  @return Returns true if value is a plain object, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isObject: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isObject"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isPromise:function(1)",
              "docComment": "/**\n * Checks if value is a Promise object\n *\n * @export\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isPromise(value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isPromise"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isRegExp:function(1)",
              "docComment": "/**\n * Checks if value is classified as a RegExp object.\n *\n * @param value - The value to check.\n *\n * @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isRegExp: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isRegExp"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isSet:function(1)",
              "docComment": "/**\n * Checks if value is classified as a Set object.\n *\n * @param value - The value to check.\n *\n * @returns Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSet: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Set",
                  "canonicalReference": "!Set:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isSet"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isString:function(1)",
              "docComment": "/**\n * Checks if value is classified as a String primitive or object.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isString: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is string"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "isString"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isSymbol:function(1)",
              "docComment": "/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @category Lang\n *\n * @param value - The value to check.\n *\n * @returns Returns `true` if `value` is correctly classified, else `false`.\n *\n * @example\n *\n * _.isSymbol(Symbol.iterator); // => true\n *\n * _.isSymbol('abc'); // => false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isSymbol: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is symbol"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isSymbol"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isTrueEmpty:function(1)",
              "docComment": "/**\n * Checks value is empty, do not consider empty objects, empty arrays, spaces, tabs, form breaks, etc.\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isTrueEmpty(value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isTrueEmpty"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isUndefined:function(1)",
              "docComment": "/**\n * Checks if value is undefined.\n *\n * @param value - The value to check.  @return Returns true if value is undefined, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isUndefined: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "value",
                  "canonicalReference": "koatty_lib!~value"
                },
                {
                  "kind": "Content",
                  "text": " is undefined"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isUndefined"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.isWritable:function(1)",
              "docComment": "/**\n * Checks if the file or folder p is writable Synchronous mode\n *\n * @param p - \n *\n * @returns {*} {boolean}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function isWritable(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "isWritable"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.lt:function(1)",
              "docComment": "/**\n * Checks if value is less than other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is less than other, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lt: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "lt"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.lte:function(1)",
              "docComment": "/**\n * Checks if value is less than or equal to other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is less than or equal to other, else false.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lte: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", other: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "lte"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.md5:function(1)",
              "docComment": "/**\n * Calculate the MD5 hash of value\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function md5(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "md5"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.md5Salt:function(1)",
              "docComment": "/**\n * Calculate the value of MD5 hash value, including simple salt\n *\n * @param value - \n *\n * @param salt - \n *\n * @returns {*} {string}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function md5Salt(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", salt?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "salt",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "md5Salt"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.minus:function(1)",
              "docComment": "/**\n * Exact subtraction\n *\n * @param x - \n *\n * @param y - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function minus(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "minus"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.mkDir:function(1)",
              "docComment": "/**\n * According to the path p to create a folder, p contains multi-level new path will be automatically recursively created. Asynchronous mode\n *\n * @param p - \n *\n * @param mode - \n *\n * @returns {Promise<any>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function mkDir(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mode?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "mode",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "mkDir"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.multi:function(1)",
              "docComment": "/**\n * Exact multiplication\n *\n * @param x - \n *\n * @param y - \n *\n * @returns {*} {number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function multi(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "multi"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.murmurHash:function(1)",
              "docComment": "/**\n * Murmur hash v2/v3\n *\n * @param value - \n *\n * @param seed - \n *\n * @param ver - \n *\n * @returns {*} {string}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function murmurHash(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", seed?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", ver?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "seed",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                },
                {
                  "parameterName": "ver",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "murmurHash"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.plus:function(1)",
              "docComment": "/**\n * Exact addition\n *\n * @param x - \n *\n * @param y - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function plus(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", y: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "y",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "plus"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.promisify:function(1)",
              "docComment": "/**\n * Convert callback-style functions to Promises\n *\n * @export\n *\n * @param fn - \n *\n * @param receiver - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function promisify(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ", receiver?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "(...args: any[]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "receiver",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "promisify"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.rand:function(1)",
              "docComment": "/**\n * Pseudo-random access min and max range of integers\n *\n * @param min - \n *\n * @param max - \n *\n * @returns {*} {number}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function rand(min: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", max: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "min",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "max",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "rand"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.readDir:function(1)",
              "docComment": "/**\n * Recursively read the path under the p folder. Asynchronous mode\n *\n * @param p - \n *\n * @param filter - \n *\n * @param prefix - \n *\n * @returns {*} {Promise<any>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function readDir(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", filter: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", prefix?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "filter",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "prefix",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": true
                }
              ],
              "name": "readDir"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.readFile:function(1)",
              "docComment": "/**\n * Read the contents of the file filename. Asynchronous mode\n *\n * @param filename - \n *\n * @param enc - \n *\n * @returns {*} {Promise<any>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function readFile(filename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", enc?: "
                },
                {
                  "kind": "Reference",
                  "text": "BufferEncoding",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.BufferEncoding:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "enc",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "readFile"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.reFile:function(1)",
              "docComment": "/**\n * Rename the file. If newFileName and fileName be not in the same physical path, the move file action will be triggered. Asynchronous mode\n *\n * @param FileName - \n *\n * @param newFileName - \n *\n * @returns {*} {Promise<any>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function reFile(fileName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", newFileName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fileName",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "newFileName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "reFile"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.rmDir:function(1)",
              "docComment": "/**\n * Subfolder of path p are recursively deleted. When reserve is true, the top-level folder is deleted Asynchronous mode\n *\n * @param p - \n *\n * @param reserve - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function rmDir(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", reserve: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "reserve",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "rmDir"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.rmFile:function(1)",
              "docComment": "/**\n * Delete the file p. Asynchronous mode\n *\n * @param p - \n *\n * @returns {*} {Promise<any>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function rmFile(p: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "p",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "rmFile"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.round:function(1)",
              "docComment": "/**\n * rounding\n *\n * @param num - \n *\n * @param ratio - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function round(num: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", ratio: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "num",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "ratio",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "round"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.safeRequire:function(1)",
              "docComment": "/**\n * Support for es6 module require\n *\n * @param file - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function safeRequire(file: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "file",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "safeRequire"
            },
            {
              "kind": "Variable",
              "canonicalReference": "koatty_lib!Helper.sep:var",
              "docComment": "/**\n * The platform-specific file separator. '\\' or '/'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "sep: "
                },
                {
                  "kind": "Content",
                  "text": "\"/\" | \"\\\\\""
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "sep",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "koatty_lib!Helper.thinkrequire:var",
              "docComment": "/**\n * Support for es6 module require\n *\n * @param file - \n *\n * @returns {*}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "thinkrequire: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "safeRequire",
                  "canonicalReference": "koatty_lib!safeRequire:function"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "thinkrequire",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "Variable",
              "canonicalReference": "koatty_lib!Helper.toArray:var",
              "docComment": "/**\n * Converts value to an array.\n *\n * @param value - The value to convert.  @return Returns the converted array.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toArray: "
                },
                {
                  "kind": "Content",
                  "text": "{\n    <T>(value: "
                },
                {
                  "kind": "Reference",
                  "text": "lodash.Dictionary",
                  "canonicalReference": "@types/lodash!\"\\\"../index\\\"\".Dictionary:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | "
                },
                {
                  "kind": "Reference",
                  "text": "lodash.NumericDictionary",
                  "canonicalReference": "@types/lodash!\"\\\"../index\\\"\".NumericDictionary:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T> | null | undefined): T[];\n    <T>(value: T): "
                },
                {
                  "kind": "Reference",
                  "text": "Array",
                  "canonicalReference": "!Array:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T[keyof T]>;\n    (): any[];\n}"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "isReadonly": true,
              "releaseTag": "Public",
              "name": "toArray",
              "variableTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.toFastProperties:function(1)",
              "docComment": "/**\n * The object obj prototype instance conversion to organize the data structure stored in the object, access to this object in the v8 engine will be faster\n *\n * @param obj - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function toFastProperties(obj: "
                },
                {
                  "kind": "Reference",
                  "text": "AnyObject",
                  "canonicalReference": "koatty_lib!~AnyObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "obj",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toFastProperties"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.toInt:function(1)",
              "docComment": "/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @category Lang\n *\n * @param value - The value to convert.\n *\n * @returns Returns the converted integer.\n *\n * @example\n *\n * _.toInteger(3); // => 3\n *\n * _.toInteger(Number.MIN_VALUE); // => 0\n *\n * _.toInteger(Infinity); // => 1.7976931348623157e+308\n *\n * _.toInteger('3'); // => 3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toInt: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "number"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toInt"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.toInteger:function(1)",
              "docComment": "/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @category Lang\n *\n * @param value - The value to convert.\n *\n * @returns Returns the converted integer.\n *\n * @example\n *\n * _.toInteger(3); // => 3\n *\n * _.toInteger(Number.MIN_VALUE); // => 0\n *\n * _.toInteger(Infinity); // => 1.7976931348623157e+308\n *\n * _.toInteger('3'); // => 3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toInteger: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "number"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toInteger"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.toNumber:function(1)",
              "docComment": "/**\n * Converts `value` to a number.\n *\n * @category Lang\n *\n * @param value - The value to process.\n *\n * @returns Returns the number.\n *\n * @example\n *\n * _.toNumber(3); // => 3\n *\n * _.toNumber(Number.MIN_VALUE); // => 5e-324\n *\n * _.toNumber(Infinity); // => Infinity\n *\n * _.toNumber('3'); // => 3\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toNumber: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "number"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toNumber"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.toObject:function(1)",
              "docComment": "/**\n * Converts value to a plain object flattening inherited enumerable properties of value to own properties of the plain object.\n *\n * @param value - The value to convert.  @return Returns the converted plain object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toObject: (value?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "any"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "toObject"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.toString:function(1)",
              "docComment": "/**\n * Converts `value` to a string if it's not one. An empty string is returned for `null` and `undefined` values. The sign of `-0` is preserved.\n *\n * @category Lang\n *\n * @param value - The value to process.\n *\n * @returns Returns the string.\n *\n * @example\n *\n * _.toString(null); // => ''\n *\n * _.toString(-0); // => '-0'\n *\n * _.toString([1, 2, 3]); // => '1,2,3'\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "toString: (value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Content",
                  "text": "string"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "toString"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.ucFirst:function(1)",
              "docComment": "/**\n * Convert the first letter in the value to uppercase\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function ucFirst(value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "ucFirst"
            },
            {
              "kind": "Function",
              "canonicalReference": "koatty_lib!Helper.writeFile:function(1)",
              "docComment": "/**\n * Write the string data to file. Asynchronous mode\n *\n * @param filename - \n *\n * @param data - \n *\n * @returns {*} {Promise<any>}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function writeFile(filename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "fileUrlPath": "src/lib.ts",
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "writeFile"
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!inArray:function(1)",
          "docComment": "/**\n * Determines whether value is an element of array arr, only determine the same value with the element, do not determine the type\n *\n * @param value - \n *\n * @param arr - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function inArray(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", arr: "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "arr",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "inArray"
        },
        {
          "kind": "Variable",
          "canonicalReference": "koatty_lib!isArray:var",
          "docComment": "/**\n * Checks if value is classified as an Array object.\n *\n * @param value - The value to check.\n *\n * @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isArray: "
            },
            {
              "kind": "Content",
              "text": "{\n    (value?: any): "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is any[];\n    <T>(value?: any): "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is any[];\n}"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "isArray",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isArrayBuffer:function(1)",
          "docComment": "/**\n * Checks if value is classified as an ArrayBuffer object.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isArrayBuffer: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "ArrayBuffer",
              "canonicalReference": "!ArrayBuffer:interface"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isArrayBuffer"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isAsyncFunction:function(1)",
          "docComment": "/**\n * Checks if value is a Async Function\n *\n * @export\n *\n * @param fn - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isAsyncFunction(fn: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isAsyncFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isBoolean:function(1)",
          "docComment": "/**\n * Checks if value is classified as a boolean primitive or object.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isBoolean: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isBoolean"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isBuffer:function(1)",
          "docComment": "/**\n * Checks if value is a buffer.\n *\n * @param value - The value to check.  @return Returns true if value is a buffer, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isBuffer: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isBuffer"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isClass:function(1)",
          "docComment": "/**\n * Checks if fn is a Class\n *\n * @param obj - \n *\n * @returns {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isClass(func: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "func",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isClass"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isDate:function(1)",
          "docComment": "/**\n * Checks if value is classified as a Date object.\n *\n * @param value - The value to check.\n *\n * @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isDate: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Date",
              "canonicalReference": "!Date:interface"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isDate"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isDir:function(1)",
          "docComment": "/**\n * Checks if path is a dir Synchronous mode\n *\n * @param p - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isDir(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isDir"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isEmpty:function(1)",
          "docComment": "/**\n * Checks value is empty, undefined, null, '', NaN, [], {} and any empty string(including spaces, tabs, formfeeds, etc.), returns true\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isEmpty(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isEmpty"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isEqual:function(1)",
          "docComment": "/**\n * Performs a deep comparison between two values to determine if they are equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans, date objects, error objects, maps, numbers, `Object` objects, regexes, sets, strings, symbols, and typed arrays. `Object` objects are compared by their own, not inherited, enumerable properties. Functions and DOM nodes are **not** supported.\n *\n * @category Lang\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.\n *\n * @returns Returns `true` if the values are equivalent, else `false`.\n *\n * @example\n *\n * var object = { 'user': 'fred' }; var other = { 'user': 'fred' };\n *\n * _.isEqual(object, other); // => true\n *\n * object === other; // => false\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isEqual: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "isEqual"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isError:function(1)",
          "docComment": "/**\n * Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError object.\n *\n * @param value - The value to check.  @return Returns true if value is an error object, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isError: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isError"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isFile:function(1)",
          "docComment": "/**\n * Checks if path is a file Synchronous mode\n *\n * @param p - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isFile(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isFunction:function(1)",
          "docComment": "/**\n * Checks if value is a callable function.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isFunction: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is (...args: any[]) => any"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isFunction"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isGenerator:function(1)",
          "docComment": "/**\n * Checks if fn is a GeneratorFunction\n *\n * @export\n *\n * @param fn - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isGenerator(fn: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isGenerator"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isInteger:function(1)",
          "docComment": "/**\n * Checks if `value` is an integer.\n *\n * **Note:** This method is based on [`Number.isInteger`](https://mdn.io/Number/isInteger).\n *\n * @category Lang\n *\n * @param value - The value to check.\n *\n * @returns Returns `true` if `value` is an integer, else `false`.\n *\n * @example\n *\n * _.isInteger(3); // => true\n *\n * _.isInteger(Number.MIN_VALUE); // => false\n *\n * _.isInteger(Infinity); // => false\n *\n * _.isInteger('3'); // => false\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isInteger: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isInteger"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isJSONObj:function(1)",
          "docComment": "/**\n * Checks if value is a standard JSON object, must be a plain object or array\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isJSONObj(value: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isJSONObj"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isJSONStr:function(1)",
          "docComment": "/**\n * Checks if value is a standard JSON string, must be a string, and can be deserialized as an plain object or array\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isJSONStr(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isJSONStr"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isMap:function(1)",
          "docComment": "/**\n * Checks if value is classified as a Map object.\n *\n * @param value - The value to check.\n *\n * @returns Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isMap: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isMap"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isNaN_2:function(1)",
          "docComment": "/**\n * Checks if value is NaN.\n *\n * Note: This method is not the same as isNaN which returns true for undefined and other non-numeric values.\n *\n * @param value - The value to check.  @return Returns true if value is NaN, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isNaN: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isNaN_2"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isNull:function(1)",
          "docComment": "/**\n * Checks if value is null.\n *\n * @param value - The value to check.  @return Returns true if value is null, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isNull: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is null"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isNull"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isNumber:function(1)",
          "docComment": "/**\n * Checks if value is classified as a Number primitive or object.\n *\n * Note: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isNumber: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is number"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isNumberString:function(1)",
          "docComment": "/**\n * Checks if value is a string that contains only numbers\n *\n * @param str - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isNumberString(str: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "str",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isNumberString"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isObject:function(1)",
          "docComment": "/**\n * Checks if value is a plain object, that is, an object created by the Object constructor or one with a [[Prototype]] of null.\n *\n * Note: This method assumes objects created by the Object constructor have no inherited enumerable properties.\n *\n * @param value - The value to check.  @return Returns true if value is a plain object, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isObject: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isPromise:function(1)",
          "docComment": "/**\n * Checks if value is a Promise object\n *\n * @export\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isPromise(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isPromise"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isRegExp:function(1)",
          "docComment": "/**\n * Checks if value is classified as a RegExp object.\n *\n * @param value - The value to check.\n *\n * @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isRegExp: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "RegExp",
              "canonicalReference": "!RegExp:interface"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isRegExp"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isSet:function(1)",
          "docComment": "/**\n * Checks if value is classified as a Set object.\n *\n * @param value - The value to check.\n *\n * @returns Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isSet: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isSet"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isString:function(1)",
          "docComment": "/**\n * Checks if value is classified as a String primitive or object.\n *\n * @param value - The value to check.  @return Returns true if value is correctly classified, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isString: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is string"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "isString"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isSymbol:function(1)",
          "docComment": "/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @category Lang\n *\n * @param value - The value to check.\n *\n * @returns Returns `true` if `value` is correctly classified, else `false`.\n *\n * @example\n *\n * _.isSymbol(Symbol.iterator); // => true\n *\n * _.isSymbol('abc'); // => false\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isSymbol: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is symbol"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSymbol"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isTrueEmpty:function(1)",
          "docComment": "/**\n * Checks value is empty, do not consider empty objects, empty arrays, spaces, tabs, form breaks, etc.\n *\n * @param value - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isTrueEmpty(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isTrueEmpty"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isUndefined:function(1)",
          "docComment": "/**\n * Checks if value is undefined.\n *\n * @param value - The value to check.  @return Returns true if value is undefined, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "isUndefined: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "value",
              "canonicalReference": "koatty_lib!~value"
            },
            {
              "kind": "Content",
              "text": " is undefined"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isUndefined"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!isWritable:function(1)",
          "docComment": "/**\n * Checks if the file or folder p is writable Synchronous mode\n *\n * @param p - \n *\n * @returns {*} {boolean}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isWritable(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isWritable"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!lt:function(1)",
          "docComment": "/**\n * Checks if value is less than other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is less than other, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "lt: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "lt"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!lte:function(1)",
          "docComment": "/**\n * Checks if value is less than or equal to other.\n *\n * @param value - The value to compare.\n *\n * @param other - The other value to compare.  @return Returns true if value is less than or equal to other, else false.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "lte: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", other: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "boolean"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "other",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "lte"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!md5:function(1)",
          "docComment": "/**\n * Calculate the MD5 hash of value\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function md5(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "md5"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!md5Salt:function(1)",
          "docComment": "/**\n * Calculate the value of MD5 hash value, including simple salt\n *\n * @param value - \n *\n * @param salt - \n *\n * @returns {*} {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function md5Salt(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", salt?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "salt",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "md5Salt"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!minus:function(1)",
          "docComment": "/**\n * Exact subtraction\n *\n * @param x - \n *\n * @param y - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function minus(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "minus"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!mkDir:function(1)",
          "docComment": "/**\n * According to the path p to create a folder, p contains multi-level new path will be automatically recursively created. Asynchronous mode\n *\n * @param p - \n *\n * @param mode - \n *\n * @returns {Promise<any>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mkDir(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", mode?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "mode",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "mkDir"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!multi:function(1)",
          "docComment": "/**\n * Exact multiplication\n *\n * @param x - \n *\n * @param y - \n *\n * @returns {*} {number}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function multi(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "multi"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!murmurHash:function(1)",
          "docComment": "/**\n * Murmur hash v2/v3\n *\n * @param value - \n *\n * @param seed - \n *\n * @param ver - \n *\n * @returns {*} {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function murmurHash(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", seed?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ver?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "seed",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            },
            {
              "parameterName": "ver",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "murmurHash"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!plus:function(1)",
          "docComment": "/**\n * Exact addition\n *\n * @param x - \n *\n * @param y - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function plus(x: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", y: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "x",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "y",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "plus"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!promisify:function(1)",
          "docComment": "/**\n * Convert callback-style functions to Promises\n *\n * @export\n *\n * @param fn - \n *\n * @param receiver - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function promisify(fn: "
            },
            {
              "kind": "Reference",
              "text": "Function",
              "canonicalReference": "!Function:interface"
            },
            {
              "kind": "Content",
              "text": ", receiver?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "(...args: any[]) => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "receiver",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "promisify"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!rand:function(1)",
          "docComment": "/**\n * Pseudo-random access min and max range of integers\n *\n * @param min - \n *\n * @param max - \n *\n * @returns {*} {number}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rand(min: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", max: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "min",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "max",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "rand"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!readDir:function(1)",
          "docComment": "/**\n * Recursively read the path under the p folder. Asynchronous mode\n *\n * @param p - \n *\n * @param filter - \n *\n * @param prefix - \n *\n * @returns {*} {Promise<any>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function readDir(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", filter: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ", prefix?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "filter",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "prefix",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": true
            }
          ],
          "name": "readDir"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!readFile:function(1)",
          "docComment": "/**\n * Read the contents of the file filename. Asynchronous mode\n *\n * @param filename - \n *\n * @param enc - \n *\n * @returns {*} {Promise<any>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function readFile(filename: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", enc?: "
            },
            {
              "kind": "Reference",
              "text": "BufferEncoding",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.BufferEncoding:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filename",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "enc",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "readFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!reFile:function(1)",
          "docComment": "/**\n * Rename the file. If newFileName and fileName be not in the same physical path, the move file action will be triggered. Asynchronous mode\n *\n * @param FileName - \n *\n * @param newFileName - \n *\n * @returns {*} {Promise<any>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function reFile(fileName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", newFileName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fileName",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "newFileName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "reFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!rmDir:function(1)",
          "docComment": "/**\n * Subfolder of path p are recursively deleted. When reserve is true, the top-level folder is deleted Asynchronous mode\n *\n * @param p - \n *\n * @param reserve - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rmDir(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", reserve: "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<unknown>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "reserve",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "rmDir"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!rmFile:function(1)",
          "docComment": "/**\n * Delete the file p. Asynchronous mode\n *\n * @param p - \n *\n * @returns {*} {Promise<any>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rmFile(p: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "p",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "rmFile"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!round:function(1)",
          "docComment": "/**\n * rounding\n *\n * @param num - \n *\n * @param ratio - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function round(num: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", ratio: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "num",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "ratio",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "round"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!safeRequire:function(1)",
          "docComment": "/**\n * Support for es6 module require\n *\n * @param file - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function safeRequire(file: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "file",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "safeRequire"
        },
        {
          "kind": "Variable",
          "canonicalReference": "koatty_lib!sep:var",
          "docComment": "/**\n * The platform-specific file separator. '\\' or '/'.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sep: "
            },
            {
              "kind": "Content",
              "text": "\"/\" | \"\\\\\""
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "sep",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "koatty_lib!thinkrequire:var",
          "docComment": "/**\n * Support for es6 module require\n *\n * @param file - \n *\n * @returns {*}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "thinkrequire: "
            },
            {
              "kind": "Content",
              "text": "typeof "
            },
            {
              "kind": "Reference",
              "text": "safeRequire",
              "canonicalReference": "koatty_lib!safeRequire:function"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "thinkrequire",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "koatty_lib!toArray:var",
          "docComment": "/**\n * Converts value to an array.\n *\n * @param value - The value to convert.  @return Returns the converted array.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "toArray: "
            },
            {
              "kind": "Content",
              "text": "{\n    <T>(value: "
            },
            {
              "kind": "Reference",
              "text": "lodash.Dictionary",
              "canonicalReference": "@types/lodash!\"\\\"../index\\\"\".Dictionary:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | "
            },
            {
              "kind": "Reference",
              "text": "lodash.NumericDictionary",
              "canonicalReference": "@types/lodash!\"\\\"../index\\\"\".NumericDictionary:interface"
            },
            {
              "kind": "Content",
              "text": "<T> | null | undefined): T[];\n    <T>(value: T): "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<T[keyof T]>;\n    (): any[];\n}"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "toArray",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!toFastProperties:function(1)",
          "docComment": "/**\n * The object obj prototype instance conversion to organize the data structure stored in the object, access to this object in the v8 engine will be faster\n *\n * @param obj - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function toFastProperties(obj: "
            },
            {
              "kind": "Reference",
              "text": "AnyObject",
              "canonicalReference": "koatty_lib!~AnyObject:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toFastProperties"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!toInt:function(1)",
          "docComment": "/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @category Lang\n *\n * @param value - The value to convert.\n *\n * @returns Returns the converted integer.\n *\n * @example\n *\n * _.toInteger(3); // => 3\n *\n * _.toInteger(Number.MIN_VALUE); // => 0\n *\n * _.toInteger(Infinity); // => 1.7976931348623157e+308\n *\n * _.toInteger('3'); // => 3\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "toInt: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toInt"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!toInteger:function(1)",
          "docComment": "/**\n * Converts `value` to an integer.\n *\n * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n *\n * @category Lang\n *\n * @param value - The value to convert.\n *\n * @returns Returns the converted integer.\n *\n * @example\n *\n * _.toInteger(3); // => 3\n *\n * _.toInteger(Number.MIN_VALUE); // => 0\n *\n * _.toInteger(Infinity); // => 1.7976931348623157e+308\n *\n * _.toInteger('3'); // => 3\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "toInteger: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toInteger"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!toNumber:function(1)",
          "docComment": "/**\n * Converts `value` to a number.\n *\n * @category Lang\n *\n * @param value - The value to process.\n *\n * @returns Returns the number.\n *\n * @example\n *\n * _.toNumber(3); // => 3\n *\n * _.toNumber(Number.MIN_VALUE); // => 5e-324\n *\n * _.toNumber(Infinity); // => Infinity\n *\n * _.toNumber('3'); // => 3\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "toNumber: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "number"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toNumber"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!toObject:function(1)",
          "docComment": "/**\n * Converts value to a plain object flattening inherited enumerable properties of value to own properties of the plain object.\n *\n * @param value - The value to convert.  @return Returns the converted plain object.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "toObject: (value?: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "any"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "toObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!toString:function(1)",
          "docComment": "/**\n * Converts `value` to a string if it's not one. An empty string is returned for `null` and `undefined` values. The sign of `-0` is preserved.\n *\n * @category Lang\n *\n * @param value - The value to process.\n *\n * @returns Returns the string.\n *\n * @example\n *\n * _.toString(null); // => ''\n *\n * _.toString(-0); // => '-0'\n *\n * _.toString([1, 2, 3]); // => '1,2,3'\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "toString: (value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Content",
              "text": "string"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "toString"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!ucFirst:function(1)",
          "docComment": "/**\n * Convert the first letter in the value to uppercase\n *\n * @param value - \n *\n * @returns {*} {string}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function ucFirst(value: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "ucFirst"
        },
        {
          "kind": "Function",
          "canonicalReference": "koatty_lib!writeFile:function(1)",
          "docComment": "/**\n * Write the string data to file. Asynchronous mode\n *\n * @param filename - \n *\n * @param data - \n *\n * @returns {*} {Promise<any>}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function writeFile(filename: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", data: "
            },
            {
              "kind": "Content",
              "text": "string | "
            },
            {
              "kind": "Reference",
              "text": "Buffer",
              "canonicalReference": "!\"\\\"buffer\\\"\".__global.Buffer:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<any>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/lib.ts",
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "filename",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "data",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "isOptional": false
            }
          ],
          "name": "writeFile"
        }
      ]
    }
  ]
}
